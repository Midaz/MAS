#!/usr/bin/env python
from ants import *


# HINT: use A* for a start - has been proven to be pretty good

# define a class with a do_turn method
# the Ants.run method will parse and update bot input
# it will also run the do_turn method for us

# State
# - locations of ants
# - evalu
# Initial State
# Player(s)
# Action(s)
#   for all ants: move    
#   prohibiting: stepping on ants, stepping on food, stepping on water
# Result(s)
#   moved, moved and eaten, moved and attacking enemy ant, moved and attacking enemy hill
# Terminal Test
#   all enemy hills dead, all enemy ants dead (not a good objective!)
# Utility Function (payoff function, objective function)
class State:
    def __init__( self, ants,w1,w2,w3,w4 ):
        
        self.w1 = w1
        self.w2 = w2
        self.w3 = w3
        self.w4 = w4
        self.map = {}
        self.my_ants = ants.my_ants()
        self.enemy_ants = ants.enemy_ants()
        self.my_hills = ants.my_hills() 
        self.enemy_hills = ants.enemy_hills
        
        self.count_init_own_ants = len(self.my_ants) 
        self.count_init_enemy_ants = len(self.enemy_ants)
        self.count_init_own_hills = len(self.my_hills)
        self.count_init_enemy_hills = len(self.enemy_hills)

        self.count_current_own_ants = self.count_init_own_ants
        self.count_current_enemy_ants = self.count_init_enemy_ants
        self.count_current_own_hills = self.count_init_own_hills
        self.count_current_enemy_hills = self.count_init_enemy_hills
        
        self.utility = self.evaluate()

        for row in range( ants.rows ):
            for col in range( ants.cols ):
                self.map.append( (row, col) )

    def set_weights ( self,w1,w2,w3,w4 ):
        self.w1 = w1
        self.w2 = w2
        self.w3 = w3
        self.w4 = w4

class MyBot:
    def __init__(self):
        # define class level variables, will be remembered between turns
        pass
    
    # do_setup is run once at the start of the game
    # after the bot has received the game settings
    # the ants class is created and setup by the Ants.run method
    def do_setup(self, ants):
        # initialize data structures after learning the game settings
        self.hills = []
        # initialize State
        self.initial_state = State( ants,1,1,1,1 )
        self.current_state = self.initial_state
        self.unseen = []
        self.map = {}
        for row in range(ants.rows):
            for col in range(ants.cols):
                self.unseen.append((row, col))
        

    def do_turn(self, ants):
        # Find best successor state and apply
        self.initial_state = State(ants)
        #self.current_state = search(self.initial_state.successor( ants ))
        pass
    
    def evaluate( self ):
        self.utility = self.w1 * self.count_current_own_ants/self.count_init_own_ants \
                     - self.w2 * self.count_current_enemy_ants/self.count_init_enemy_ants \
                     + self.w3 * self.count_current_own_hills/self.count_init_own_hills \
                     - self.w4 * self.count_current_enemy_hills/self.count_init_enemy_hills
        return self.utility
    
    def goal_test( self ):
        if self.count_current_enemy_ants is 0 or self.count_current_enemy_hills is 0:
            return True
        return False
    
    def cutoff( self ):
        # no more available spots.. ?
        return False
    
    def successor( self,ants ):
        orders = {}
        def do_move_direction(loc, direction):
            new_loc = ants.destination(loc, direction)
            if (ants.unoccupied(new_loc) and new_loc not in orders):
                orders[new_loc] = loc
                return True
            else:
                return False
            
        targets = {}
        def do_move_location(loc, dest):
            directions = ants.direction(loc, dest)
            for direction in directions:
                if do_move_direction(loc, direction):
                    targets[dest] = loc
                    return True
            return False
        
        # prevent stepping on own hill
        for hill_loc in ants.my_hills():
            orders[hill_loc] = None
            
        # find close food
        ant_dist = []
        for food_loc in ants.food():
            for ant_loc in ants.my_ants():
                dist = ants.distance(ant_loc, food_loc)
                ant_dist.append((dist, ant_loc, food_loc))
        ant_dist.sort()
        for dist, ant_loc, food_loc in ant_dist:
            if food_loc not in targets and ant_loc not in targets.values():
                do_move_location(ant_loc, food_loc)
                
        # attack hills
        for hill_loc, hill_owner in ants.enemy_hills():
            if hill_loc not in self.hills:
                self.hills.append(hill_loc)     

        ant_dist = []
        for hill_loc in self.hills:
            for ant_loc in ants.my_ants():
                if ant_loc not in orders.values():
                    dist = ants.distance(ant_loc, hill_loc)
                    ant_dist.append((dist, ant_loc, hill_loc))
        ant_dist.sort()
        for dist, ant_loc, hill_loc in ant_dist:
            do_move_location(ant_loc, hill_loc)
            
        # explore unseen areas
        for loc in self.unseen[:]:
            if ants.visible(loc):
                self.unseen.remove(loc)

        for ant_loc in ants.my_ants():
            if ant_loc not in orders.values():
                # visit undiscovered locations
                unseen_dist = []
                for unseen_loc in self.unseen:
                    dist = ants.distance(ant_loc, unseen_loc)
                    unseen_dist.append((dist, unseen_loc))
                unseen_dist.sort()
                for dist, unseen_loc in unseen_dist:
                    if do_move_location(ant_loc, unseen_loc):
                        break
            
        # unblock own hill
        for hill_loc in ants.my_hills():
            if hill_loc in ants.my_ants() and hill_loc not in orders.values():
                for direction in ('s','e','w','n'):
                    if do_move_direction(hill_loc, direction):
                        break
        
        def search( self ):
            # IMPLEMENTED RECURSION
            # if goal_test return utility
            # if cutoff_test return utility
            # 
            # for all successor nodes
            #     do search
            self.current_state = self.initial_state.successor( self,ants )
            pass



if __name__ == '__main__':
    # psyco will speed up python a little, but is not needed
    try:
        import psyco
        psyco.full()
    except ImportError:
        pass
    
    try:
        # if run is passed a class with a do_turn method, it will do the work
        # this is not needed, in which case you will need to write your own
        # parsing function and your own game state class
        Ants.run(MyBot())
    except KeyboardInterrupt:
        print('ctrl-c, leaving ...')
