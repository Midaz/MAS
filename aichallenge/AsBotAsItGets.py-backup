#!/usr/bin/env python
from ants import *


# HINT: use A* for a start - has been proven to be pretty good

# define a class with a do_turn method
# the Ants.run method will parse and update bot input
# it will also run the do_turn method for us


# Initial State
# Player(s)
# Action(s)
#   for all ants: move    
#   prohibiting: stepping on ants, stepping on food, stepping on water
# Result(s)
#   moved, moved and eaten, moved and attacking enemy ant, moved and attacking enemy hill
# Terminal Test
#   all enemy hills dead, all enemy ants dead (not a good objective!)
# Utility Function (payoff function, objective function)
#   




class AsBotAsItGets:
    def __init__(self):
        # define class level variables, will be remembered between turns
        self.no_of_ants = 0
        pass


    def do_setup(self, ants):
        # initialize data structures after learning the game settings
        self.hills = []
        self.unseen = []
        for row in range(ants.rows):
            for col in range(ants.cols):
                self.unseen.append((row, col))

    

    def do_turn(self, ants):
        # track all moves, prevent collisions
        self.no_of_ants = len(ants.my_ants())
        self.orders = {}
        self.targets = {}
        self.unseen_dist = []
        print len(ants.my_ants())

        def do_move_direction(loc, direction):
            new_loc = ants.destination(loc, direction)
            if (ants.unoccupied(new_loc) and new_loc not in self.orders):
                ants.issue_order((loc, direction))
                self.orders[new_loc] = loc
                return True
            else:
                return False
        

        def do_move_location(loc, dest):
            self.directions = ants.direction(loc, dest)
            for direction in self.directions:
                if do_move_direction(loc, direction):
                    self.targets[dest] = loc
                    return True
            return False

        # prevent stepping on own hill
        for hill_loc in ants.my_hills():
            self.orders[hill_loc] = None



        # find close food
        def find_closest_food(ants):
            ant_dist = []
            for food_loc in ants.food():
                for ant_loc in ants.my_ants():
                    dist = ants.distance(ant_loc, food_loc)
                    ant_dist.append((dist, ant_loc, food_loc))
            ant_dist.sort()
            for dist, ant_loc, food_loc in ant_dist:
                if food_loc not in self.targets and ant_loc not in self.targets.values():
                    do_move_location(ant_loc, food_loc)


        # attack hills
        def find_closest_enemy_hills(ants):
            for hill_loc, hill_owner in ants.enemy_hills():
                if hill_loc not in self.hills:
                    self.hills.append(hill_loc)     
            ant_dist = []
            for hill_loc in self.hills:
                for ant_loc in ants.my_ants():
                    if ant_loc not in orders.values():
                        dist = ants.distance(ant_loc, hill_loc)
                        ant_dist.append((dist, ant_loc, hill_loc))
            ant_dist.sort()
            for dist, ant_loc, hill_loc in ant_dist:
                do_move_location(ant_loc, hill_loc)

        

        def find_closest_unseen(ants):
            # explore unseen areas
            for loc in self.unseen[:]:
                if ants.visible(loc):
                    self.unseen.remove(loc)

            for ant_loc in ants.my_ants():
                if ant_loc not in self.orders.values():
                    # visit undiscovered locations
                    for unseen_loc in self.unseen:
                        dist = ants.distance(ant_loc, unseen_loc)
                        self.unseen_dist.append((dist, unseen_loc))
                    self.unseen_dist.sort()
            for dist, unseen_loc in self.unseen_dist:
                if do_move_location(ant_loc, unseen_loc):
                    break
                

                
        def unblock_own_hill(ants):
            # unblock own hill
            for hill_loc in ants.my_hills():
                if hill_loc in ants.my_ants() and hill_loc not in self.orders.values():
                    for direction in ('s','e','w','n'):
                        if do_move_direction(hill_loc, direction):
                            break

        # issue food move

        # issue enemy hill move

        # issue exploratory move
        
        find_closest_food(ants)
        find_closest_enemy_hills(ants)
        find_closest_unseen(ants)
        unblock_own_hill(ants)

if __name__ == '__main__':
    # psyco will speed up python a little, but is not needed
    try:
        import psyco
        psyco.full()
    except ImportError:
        pass
    
    try:
        # if run is passed a class with a do_turn method, it will do the work
        # this is not needed, in which case you will need to write your own
        # parsing function and your own game state class
        Ants.run(AsBotAsItGets())
    except KeyboardInterrupt:
        print('ctrl-c, leaving ...')
