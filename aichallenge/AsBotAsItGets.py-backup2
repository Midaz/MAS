#!/usr/bin/env python
from ants import *


# HINT: use A* for a start - has been proven to be pretty good

# define a class with a do_turn method
# the Ants.run method will parse and update bot input
# it will also run the do_turn method for us


# Initial State
# Player(s)
# Action(s)
#   for all ants: move    
#   prohibiting: stepping on ants, stepping on food, stepping on water
# Result(s)
#   moved, moved and eaten, moved and attacking enemy ant, moved and attacking enemy hill
# Terminal Test
#   all enemy hills dead, all enemy ants dead (not a good objective!)
# Utility Function (payoff function, objective function)
#   




class AsBotAsItGets:
    def __init__(self):
        # define class level variables, will be remembered between turns
        pass
    
    # do_setup is run once at the start of the game
    # after the bot has received the game settings
    # the ants class is created and setup by the Ants.run method
    def do_setup(self, ants):
        # initialize data structures after learning the game settings
        self.hills = []
        self.unseen = []

        for row in range(ants.rows):
            for col in range(ants.cols):
                if ants.passable((row,col)):
                    self.unseen.append((row, col))

        self.map = self.unseen
        
    # do turn is run once per turn
    # the ants class has the game state and is updated by the Ants.run method
    # it also has several helper methods to use

    def do_turn(self, ants):
        # track all moves, prevent collisions
        orders = {}
        def do_move_direction(loc, direction):
            new_loc = ants.destination(loc, direction)
            if (ants.unoccupied(new_loc) and new_loc not in orders):
                ants.issue_order((loc, direction))
                orders[new_loc] = loc
                return True
            else:
                return False
        
        targets = {}
        def do_move_location(loc, dest):
            directions = ants.direction(loc, dest)
            for direction in directions:
                if do_move_direction(loc, direction):
                    targets[dest] = loc
                    return True
            return False

        my_ants = ants.my_ants()
        enemy_ants = ants.enemy_ants()
        my_hills = ants.my_hills()
        enemy_hills = ants.enemy_hills()
        food = ants.food()
        
        # find close food
        ant_dist = []
        for food_loc in ants.food():
            for ant_loc in ants.my_ants():
                dist = ants.distance(ant_loc, food_loc)
                ant_dist.append((dist, ant_loc, food_loc))
        ant_dist.sort()
        for dist, ant_loc, food_loc in ant_dist:
            if food_loc not in targets and ant_loc not in targets.values():
                do_move_location(ant_loc, food_loc)

        # explore unseen areas
        for loc in self.unseen[:]:
            if ants.visible(loc):
                self.unseen.remove(loc)

        for ant_loc in ants.my_ants():
            if ant_loc not in orders.values():
                # visit undiscovered locations
                unseen_dist = []
                for unseen_loc in self.unseen:
                    dist = ants.distance(ant_loc, unseen_loc)
                    unseen_dist.append((dist, unseen_loc))
                unseen_dist.sort()
                for dist, unseen_loc in unseen_dist:
                    if do_move_location(ant_loc, unseen_loc):
                        break


        #unblock hills
        for hill_loc in ants.my_hills():
            if hill_loc in ants.my_ants() and hill_loc not in orders.values():
                for direction in ('s','e','w','n'):
                    if do_move_direction(hill_loc, direction):
                        break

        # get all near objects
        for ant in my_ants:
            near_food = []
            near_ants = []
            near_enemy_ants = []
            near_hills = []
            near_enemy_hills = []


            for x in range(-5,5):
                for y in range(-5,5):
                    dist = ants.distance(ant, (ant[0]+x,ant[1]+y))
                    if (ant[0]+x,ant[1]+y) in food:
                        near_food.append((dist,ant[0]+x,ant[1]+y))
                    if (ant[0]+x,ant[1]+y) in my_ants:
                        near_ants.append((dist,ant[0]+x,ant[1]+y))
                    if (ant[0]+x,ant[1]+y) in enemy_ants:
                        near_enemy_ants.append((dist,ant[0]+x,ant[1]+y))
                    if (ant[0]+x,ant[1]+y) in my_hills:
                        near_hills.append((dist,ant[0]+x,ant[1]+y))
                    if (ant[0]+x,ant[1]+y) in enemy_hills:
                        near_enemy_hills.append((dist,ant[0]+x,ant[1]+y))

            near_food.sort()
            near_ants.sort()
            near_enemy_ants.sort()
            near_hills.sort()
            near_enemy_hills.sort()
            
            # attack when not outnumbered
            #if ant not in orders and len(near_ants) > len(near_enemy_ants):
            if ant not in orders and len(near_ants) > len(near_enemy_ants) and len(near_food) > 0:
                #weighted_ants = [1,1]
                #for near_enemy_ant in near_enemy_ants:
                #    weighted_ants[0] = weighted_ants[0] * near_enemy_ant[0]
                #    weighted_ants[1] = weighted_ants[1] * near_enemy_ant[1]
                #new_location = [0,0]
                #new_location[0] = weighted_ants[0]
                #new_location[1] = weighted_ants[1]
                #do_move_location(ant, (new_location[0],new_location[1]))

                do_move_location(ant, (near_food[0][1],near_food[0][2]))

            # run away when outnumbered
            if len(near_ants) < len(near_enemy_ants):
                weighted_ants = [1,1]
                for near_enemy_ant in near_enemy_ants:
                    weighted_ants[0] = weighted_ants[0] * near_enemy_ant[0]
                    weighted_ants[1] = weighted_ants[1] * near_enemy_ant[1]
                new_location = [0,0]
                new_location[0] = ant[0] - (weighted_ants[0] - ant[0])
                new_location[1] = ant[1] - (weighted_ants[1] - ant[1])
                do_move_location(ant, (new_location[0],new_location[1]))


            # do not allow groups of more than 4
            if ant not in orders and len(near_ants) > 4:
                weighted_ants = [1,1]
                for near_ant in near_ants:
                    weighted_ants[0] = weighted_ants[0] * near_ant[0]
                    weighted_ants[1] = weighted_ants[1] * near_ant[1]
                new_location = [0,0]
                new_location[0] = ant[0] - (weighted_ants[1] - ant[0])
                new_location[1] = ant[1] - (weighted_ants[0] - ant[1])
                do_move_location(ant, (new_location[0],new_location[1]))

            # move with group
            if ant not in orders and len(near_ants) <= 4 and len(near_ants) > 1:
                weighted_ants = [1,1]
                for near_ant in near_ants:
                    if near_ant != ant and near_ant in orders:
                        do_move_direction(ant, orders[near_ant])



if __name__ == '__main__':
    # psyco will speed up python a little, but is not needed
    try:
        import psyco
        psyco.full()
    except ImportError:
        pass
    
    try:
        # if run is passed a class with a do_turn method, it will do the work
        # this is not needed, in which case you will need to write your own
        # parsing function and your own game state class
        Ants.run(AsBotAsItGets())
    except KeyboardInterrupt:
        print('ctrl-c, leaving ...')
